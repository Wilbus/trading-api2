// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHWABCANDLELIST_SCHWABMARKETDATA_H_
#define FLATBUFFERS_GENERATED_SCHWABCANDLELIST_SCHWABMARKETDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace schwabMarketData {

struct Candle;
struct CandleBuilder;
struct CandleT;

struct CandleList;
struct CandleListBuilder;
struct CandleListT;

bool operator==(const CandleT &lhs, const CandleT &rhs);
bool operator!=(const CandleT &lhs, const CandleT &rhs);
bool operator==(const CandleListT &lhs, const CandleListT &rhs);
bool operator!=(const CandleListT &lhs, const CandleListT &rhs);

struct CandleT : public ::flatbuffers::NativeTable {
  typedef Candle TableType;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "schwabMarketData.CandleT";
  }
  double open = 0.0;
  double high = 0.0;
  double low = 0.0;
  double close = 0.0;
  int64_t volume = 0;
  int64_t datetime = 0;
  std::string datetimeISO8601{};
};

struct Candle FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CandleT NativeTableType;
  typedef CandleBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "schwabMarketData.Candle";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPEN = 4,
    VT_HIGH = 6,
    VT_LOW = 8,
    VT_CLOSE = 10,
    VT_VOLUME = 12,
    VT_DATETIME = 14,
    VT_DATETIMEISO8601 = 16
  };
  double open() const {
    return GetField<double>(VT_OPEN, 0.0);
  }
  bool mutate_open(double _open = 0.0) {
    return SetField<double>(VT_OPEN, _open, 0.0);
  }
  double high() const {
    return GetField<double>(VT_HIGH, 0.0);
  }
  bool mutate_high(double _high = 0.0) {
    return SetField<double>(VT_HIGH, _high, 0.0);
  }
  double low() const {
    return GetField<double>(VT_LOW, 0.0);
  }
  bool mutate_low(double _low = 0.0) {
    return SetField<double>(VT_LOW, _low, 0.0);
  }
  double close() const {
    return GetField<double>(VT_CLOSE, 0.0);
  }
  bool mutate_close(double _close = 0.0) {
    return SetField<double>(VT_CLOSE, _close, 0.0);
  }
  int64_t volume() const {
    return GetField<int64_t>(VT_VOLUME, 0);
  }
  bool mutate_volume(int64_t _volume = 0) {
    return SetField<int64_t>(VT_VOLUME, _volume, 0);
  }
  int64_t datetime() const {
    return GetField<int64_t>(VT_DATETIME, 0);
  }
  bool mutate_datetime(int64_t _datetime = 0) {
    return SetField<int64_t>(VT_DATETIME, _datetime, 0);
  }
  const ::flatbuffers::String *datetimeISO8601() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATETIMEISO8601);
  }
  ::flatbuffers::String *mutable_datetimeISO8601() {
    return GetPointer<::flatbuffers::String *>(VT_DATETIMEISO8601);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_OPEN, 8) &&
           VerifyField<double>(verifier, VT_HIGH, 8) &&
           VerifyField<double>(verifier, VT_LOW, 8) &&
           VerifyField<double>(verifier, VT_CLOSE, 8) &&
           VerifyField<int64_t>(verifier, VT_VOLUME, 8) &&
           VerifyField<int64_t>(verifier, VT_DATETIME, 8) &&
           VerifyOffset(verifier, VT_DATETIMEISO8601) &&
           verifier.VerifyString(datetimeISO8601()) &&
           verifier.EndTable();
  }
  CandleT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CandleT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Candle> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CandleT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CandleBuilder {
  typedef Candle Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_open(double open) {
    fbb_.AddElement<double>(Candle::VT_OPEN, open, 0.0);
  }
  void add_high(double high) {
    fbb_.AddElement<double>(Candle::VT_HIGH, high, 0.0);
  }
  void add_low(double low) {
    fbb_.AddElement<double>(Candle::VT_LOW, low, 0.0);
  }
  void add_close(double close) {
    fbb_.AddElement<double>(Candle::VT_CLOSE, close, 0.0);
  }
  void add_volume(int64_t volume) {
    fbb_.AddElement<int64_t>(Candle::VT_VOLUME, volume, 0);
  }
  void add_datetime(int64_t datetime) {
    fbb_.AddElement<int64_t>(Candle::VT_DATETIME, datetime, 0);
  }
  void add_datetimeISO8601(::flatbuffers::Offset<::flatbuffers::String> datetimeISO8601) {
    fbb_.AddOffset(Candle::VT_DATETIMEISO8601, datetimeISO8601);
  }
  explicit CandleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Candle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Candle>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Candle> CreateCandle(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double open = 0.0,
    double high = 0.0,
    double low = 0.0,
    double close = 0.0,
    int64_t volume = 0,
    int64_t datetime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> datetimeISO8601 = 0) {
  CandleBuilder builder_(_fbb);
  builder_.add_datetime(datetime);
  builder_.add_volume(volume);
  builder_.add_close(close);
  builder_.add_low(low);
  builder_.add_high(high);
  builder_.add_open(open);
  builder_.add_datetimeISO8601(datetimeISO8601);
  return builder_.Finish();
}

struct Candle::Traits {
  using type = Candle;
  static auto constexpr Create = CreateCandle;
};

inline ::flatbuffers::Offset<Candle> CreateCandleDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double open = 0.0,
    double high = 0.0,
    double low = 0.0,
    double close = 0.0,
    int64_t volume = 0,
    int64_t datetime = 0,
    const char *datetimeISO8601 = nullptr) {
  auto datetimeISO8601__ = datetimeISO8601 ? _fbb.CreateString(datetimeISO8601) : 0;
  return schwabMarketData::CreateCandle(
      _fbb,
      open,
      high,
      low,
      close,
      volume,
      datetime,
      datetimeISO8601__);
}

::flatbuffers::Offset<Candle> CreateCandle(::flatbuffers::FlatBufferBuilder &_fbb, const CandleT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CandleListT : public ::flatbuffers::NativeTable {
  typedef CandleList TableType;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "schwabMarketData.CandleListT";
  }
  std::vector<std::unique_ptr<schwabMarketData::CandleT>> candles{};
  bool empty = false;
  double previousClose = 0.0;
  int64_t previousCloseDate = 0;
  std::string previousCloseDateISO8601{};
  std::string symbol{};
  CandleListT() = default;
  CandleListT(const CandleListT &o);
  CandleListT(CandleListT&&) FLATBUFFERS_NOEXCEPT = default;
  CandleListT &operator=(CandleListT o) FLATBUFFERS_NOEXCEPT;
};

struct CandleList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CandleListT NativeTableType;
  typedef CandleListBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "schwabMarketData.CandleList";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CANDLES = 4,
    VT_EMPTY = 6,
    VT_PREVIOUSCLOSE = 8,
    VT_PREVIOUSCLOSEDATE = 10,
    VT_PREVIOUSCLOSEDATEISO8601 = 12,
    VT_SYMBOL = 14
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<schwabMarketData::Candle>> *candles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<schwabMarketData::Candle>> *>(VT_CANDLES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<schwabMarketData::Candle>> *mutable_candles() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<schwabMarketData::Candle>> *>(VT_CANDLES);
  }
  bool empty() const {
    return GetField<uint8_t>(VT_EMPTY, 0) != 0;
  }
  bool mutate_empty(bool _empty = 0) {
    return SetField<uint8_t>(VT_EMPTY, static_cast<uint8_t>(_empty), 0);
  }
  double previousClose() const {
    return GetField<double>(VT_PREVIOUSCLOSE, 0.0);
  }
  bool mutate_previousClose(double _previousClose = 0.0) {
    return SetField<double>(VT_PREVIOUSCLOSE, _previousClose, 0.0);
  }
  int64_t previousCloseDate() const {
    return GetField<int64_t>(VT_PREVIOUSCLOSEDATE, 0);
  }
  bool mutate_previousCloseDate(int64_t _previousCloseDate = 0) {
    return SetField<int64_t>(VT_PREVIOUSCLOSEDATE, _previousCloseDate, 0);
  }
  const ::flatbuffers::String *previousCloseDateISO8601() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREVIOUSCLOSEDATEISO8601);
  }
  ::flatbuffers::String *mutable_previousCloseDateISO8601() {
    return GetPointer<::flatbuffers::String *>(VT_PREVIOUSCLOSEDATEISO8601);
  }
  const ::flatbuffers::String *symbol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMBOL);
  }
  ::flatbuffers::String *mutable_symbol() {
    return GetPointer<::flatbuffers::String *>(VT_SYMBOL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CANDLES) &&
           verifier.VerifyVector(candles()) &&
           verifier.VerifyVectorOfTables(candles()) &&
           VerifyField<uint8_t>(verifier, VT_EMPTY, 1) &&
           VerifyField<double>(verifier, VT_PREVIOUSCLOSE, 8) &&
           VerifyField<int64_t>(verifier, VT_PREVIOUSCLOSEDATE, 8) &&
           VerifyOffset(verifier, VT_PREVIOUSCLOSEDATEISO8601) &&
           verifier.VerifyString(previousCloseDateISO8601()) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           verifier.EndTable();
  }
  CandleListT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CandleListT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<CandleList> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CandleListT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CandleListBuilder {
  typedef CandleList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_candles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<schwabMarketData::Candle>>> candles) {
    fbb_.AddOffset(CandleList::VT_CANDLES, candles);
  }
  void add_empty(bool empty) {
    fbb_.AddElement<uint8_t>(CandleList::VT_EMPTY, static_cast<uint8_t>(empty), 0);
  }
  void add_previousClose(double previousClose) {
    fbb_.AddElement<double>(CandleList::VT_PREVIOUSCLOSE, previousClose, 0.0);
  }
  void add_previousCloseDate(int64_t previousCloseDate) {
    fbb_.AddElement<int64_t>(CandleList::VT_PREVIOUSCLOSEDATE, previousCloseDate, 0);
  }
  void add_previousCloseDateISO8601(::flatbuffers::Offset<::flatbuffers::String> previousCloseDateISO8601) {
    fbb_.AddOffset(CandleList::VT_PREVIOUSCLOSEDATEISO8601, previousCloseDateISO8601);
  }
  void add_symbol(::flatbuffers::Offset<::flatbuffers::String> symbol) {
    fbb_.AddOffset(CandleList::VT_SYMBOL, symbol);
  }
  explicit CandleListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CandleList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CandleList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CandleList> CreateCandleList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<schwabMarketData::Candle>>> candles = 0,
    bool empty = false,
    double previousClose = 0.0,
    int64_t previousCloseDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> previousCloseDateISO8601 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> symbol = 0) {
  CandleListBuilder builder_(_fbb);
  builder_.add_previousCloseDate(previousCloseDate);
  builder_.add_previousClose(previousClose);
  builder_.add_symbol(symbol);
  builder_.add_previousCloseDateISO8601(previousCloseDateISO8601);
  builder_.add_candles(candles);
  builder_.add_empty(empty);
  return builder_.Finish();
}

struct CandleList::Traits {
  using type = CandleList;
  static auto constexpr Create = CreateCandleList;
};

inline ::flatbuffers::Offset<CandleList> CreateCandleListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<schwabMarketData::Candle>> *candles = nullptr,
    bool empty = false,
    double previousClose = 0.0,
    int64_t previousCloseDate = 0,
    const char *previousCloseDateISO8601 = nullptr,
    const char *symbol = nullptr) {
  auto candles__ = candles ? _fbb.CreateVector<::flatbuffers::Offset<schwabMarketData::Candle>>(*candles) : 0;
  auto previousCloseDateISO8601__ = previousCloseDateISO8601 ? _fbb.CreateString(previousCloseDateISO8601) : 0;
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  return schwabMarketData::CreateCandleList(
      _fbb,
      candles__,
      empty,
      previousClose,
      previousCloseDate,
      previousCloseDateISO8601__,
      symbol__);
}

::flatbuffers::Offset<CandleList> CreateCandleList(::flatbuffers::FlatBufferBuilder &_fbb, const CandleListT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const CandleT &lhs, const CandleT &rhs) {
  return
      (lhs.open == rhs.open) &&
      (lhs.high == rhs.high) &&
      (lhs.low == rhs.low) &&
      (lhs.close == rhs.close) &&
      (lhs.volume == rhs.volume) &&
      (lhs.datetime == rhs.datetime) &&
      (lhs.datetimeISO8601 == rhs.datetimeISO8601);
}

inline bool operator!=(const CandleT &lhs, const CandleT &rhs) {
    return !(lhs == rhs);
}


inline CandleT *Candle::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::make_unique<CandleT>();
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Candle::UnPackTo(CandleT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = open(); _o->open = _e; }
  { auto _e = high(); _o->high = _e; }
  { auto _e = low(); _o->low = _e; }
  { auto _e = close(); _o->close = _e; }
  { auto _e = volume(); _o->volume = _e; }
  { auto _e = datetime(); _o->datetime = _e; }
  { auto _e = datetimeISO8601(); if (_e) _o->datetimeISO8601 = _e->str(); }
}

inline ::flatbuffers::Offset<Candle> Candle::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CandleT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCandle(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Candle> CreateCandle(::flatbuffers::FlatBufferBuilder &_fbb, const CandleT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CandleT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _open = _o->open;
  auto _high = _o->high;
  auto _low = _o->low;
  auto _close = _o->close;
  auto _volume = _o->volume;
  auto _datetime = _o->datetime;
  auto _datetimeISO8601 = _o->datetimeISO8601.empty() ? _fbb.CreateSharedString("") : _fbb.CreateString(_o->datetimeISO8601);
  return schwabMarketData::CreateCandle(
      _fbb,
      _open,
      _high,
      _low,
      _close,
      _volume,
      _datetime,
      _datetimeISO8601);
}


inline bool operator==(const CandleListT &lhs, const CandleListT &rhs) {
  return
      (lhs.candles.size() == rhs.candles.size() && std::equal(lhs.candles.cbegin(), lhs.candles.cend(), rhs.candles.cbegin(), [](std::unique_ptr<schwabMarketData::CandleT> const &a, std::unique_ptr<schwabMarketData::CandleT> const &b) { return (a == b) || (a && b && *a == *b); })) &&
      (lhs.empty == rhs.empty) &&
      (lhs.previousClose == rhs.previousClose) &&
      (lhs.previousCloseDate == rhs.previousCloseDate) &&
      (lhs.previousCloseDateISO8601 == rhs.previousCloseDateISO8601) &&
      (lhs.symbol == rhs.symbol);
}

inline bool operator!=(const CandleListT &lhs, const CandleListT &rhs) {
    return !(lhs == rhs);
}


inline CandleListT::CandleListT(const CandleListT &o)
      : empty(o.empty),
        previousClose(o.previousClose),
        previousCloseDate(o.previousCloseDate),
        previousCloseDateISO8601(o.previousCloseDateISO8601),
        symbol(o.symbol) {
  candles.reserve(o.candles.size());
  for (const auto &candles_ : o.candles) { candles.emplace_back((candles_) ? new schwabMarketData::CandleT(*candles_) : nullptr); }
}

inline CandleListT &CandleListT::operator=(CandleListT o) FLATBUFFERS_NOEXCEPT {
  std::swap(candles, o.candles);
  std::swap(empty, o.empty);
  std::swap(previousClose, o.previousClose);
  std::swap(previousCloseDate, o.previousCloseDate);
  std::swap(previousCloseDateISO8601, o.previousCloseDateISO8601);
  std::swap(symbol, o.symbol);
  return *this;
}

inline CandleListT *CandleList::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::make_unique<CandleListT>();
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CandleList::UnPackTo(CandleListT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = candles(); if (_e) { _o->candles.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->candles[_i]) { _e->Get(_i)->UnPackTo(_o->candles[_i].get(), _resolver); } else { _o->candles[_i] = std::unique_ptr<schwabMarketData::CandleT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->candles.resize(0); } }
  { auto _e = empty(); _o->empty = _e; }
  { auto _e = previousClose(); _o->previousClose = _e; }
  { auto _e = previousCloseDate(); _o->previousCloseDate = _e; }
  { auto _e = previousCloseDateISO8601(); if (_e) _o->previousCloseDateISO8601 = _e->str(); }
  { auto _e = symbol(); if (_e) _o->symbol = _e->str(); }
}

inline ::flatbuffers::Offset<CandleList> CandleList::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CandleListT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCandleList(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<CandleList> CreateCandleList(::flatbuffers::FlatBufferBuilder &_fbb, const CandleListT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CandleListT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _candles = _fbb.CreateVector<::flatbuffers::Offset<schwabMarketData::Candle>> (_o->candles.size(), [](size_t i, _VectorArgs *__va) { return CreateCandle(*__va->__fbb, __va->__o->candles[i].get(), __va->__rehasher); }, &_va );
  auto _empty = _o->empty;
  auto _previousClose = _o->previousClose;
  auto _previousCloseDate = _o->previousCloseDate;
  auto _previousCloseDateISO8601 = _o->previousCloseDateISO8601.empty() ? _fbb.CreateSharedString("") : _fbb.CreateString(_o->previousCloseDateISO8601);
  auto _symbol = _o->symbol.empty() ? _fbb.CreateSharedString("") : _fbb.CreateString(_o->symbol);
  return schwabMarketData::CreateCandleList(
      _fbb,
      _candles,
      _empty,
      _previousClose,
      _previousCloseDate,
      _previousCloseDateISO8601,
      _symbol);
}

inline const schwabMarketData::CandleList *GetCandleList(const void *buf) {
  return ::flatbuffers::GetRoot<schwabMarketData::CandleList>(buf);
}

inline const schwabMarketData::CandleList *GetSizePrefixedCandleList(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<schwabMarketData::CandleList>(buf);
}

inline CandleList *GetMutableCandleList(void *buf) {
  return ::flatbuffers::GetMutableRoot<CandleList>(buf);
}

inline schwabMarketData::CandleList *GetMutableSizePrefixedCandleList(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<schwabMarketData::CandleList>(buf);
}

inline bool VerifyCandleListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<schwabMarketData::CandleList>(nullptr);
}

inline bool VerifySizePrefixedCandleListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<schwabMarketData::CandleList>(nullptr);
}

inline void FinishCandleListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<schwabMarketData::CandleList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCandleListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<schwabMarketData::CandleList> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<schwabMarketData::CandleListT> UnPackCandleList(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<schwabMarketData::CandleListT>(GetCandleList(buf)->UnPack(res));
}

inline std::unique_ptr<schwabMarketData::CandleListT> UnPackSizePrefixedCandleList(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<schwabMarketData::CandleListT>(GetSizePrefixedCandleList(buf)->UnPack(res));
}

}  // namespace schwabMarketData

#endif  // FLATBUFFERS_GENERATED_SCHWABCANDLELIST_SCHWABMARKETDATA_H_
